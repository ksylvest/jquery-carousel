// Generated by CoffeeScript 1.6.3
/*
jQuery Carousel
Copyright 2010 - 2014 Kevin Sylvestre
1.1.8
*/


(function() {
  "use strict";
  var $, Animation, Carousel;

  $ = jQuery;

  Animation = (function() {
    function Animation() {}

    Animation.transitions = {
      "webkitTransition": "webkitTransitionEnd",
      "mozTransition": "mozTransitionEnd",
      "oTransition": "oTransitionEnd",
      "transition": "transitionend"
    };

    Animation.transition = function($el) {
      var el, result, type, _ref;
      el = $el[0];
      _ref = this.transitions;
      for (type in _ref) {
        result = _ref[type];
        if (el.style[type] != null) {
          return result;
        }
      }
    };

    Animation.execute = function($el, callback) {
      var transition;
      transition = this.transition($el);
      if (transition != null) {
        return $el.one(transition, callback);
      } else {
        return callback();
      }
    };

    return Animation;

  })();

  Carousel = (function() {
    Carousel.defaults = {};

    function Carousel($el, settings) {
      if (settings == null) {
        settings = {};
      }
      this.$el = $el;
      this.settings = $.extend({}, Carousel.defaults, settings);
      if (!this.$active().length) {
        this.$previews().first().toggleClass('active');
      }
    }

    Carousel.prototype.next = function() {
      return this.go("next");
    };

    Carousel.prototype.prev = function() {
      return this.go("prev");
    };

    Carousel.prototype.$fallback = function(direction) {
      var method;
      method = (function() {
        switch (direction) {
          case "prev":
            return "last";
          case "next":
            return "first";
        }
      })();
      return this.$(".previews .preview")[method]();
    };

    Carousel.prototype.$previews = function() {
      return this.$(".previews .preview");
    };

    Carousel.prototype.$active = function() {
      return this.$(".previews .preview.active");
    };

    Carousel.prototype.swap = function($active, $pending, direction, activated) {
      var animating, callback;
      if (activated == null) {
        activated = 'active';
      }
      animating = "" + direction + "ing";
      $pending.addClass(direction);
      $pending.offset().position;
      $active.addClass(animating);
      $pending.addClass(animating);
      callback = function() {
        $active.removeClass(activated).removeClass(animating);
        return $pending.addClass(activated).removeClass(animating).removeClass(direction);
      };
      return Animation.execute($active, callback);
    };

    Carousel.prototype.page = function(index) {
      var $active, $pending, direction, existing;
      $active = this.$active();
      $pending = this.$previews().eq(index);
      existing = this.$previews().index($active);
      direction = existing > index ? 'prev' : 'next';
      if ($pending.is($active)) {
        return;
      }
      return this.swap($active, $pending, direction);
    };

    Carousel.prototype.go = function(direction) {
      var $active, $pending;
      $active = this.$active();
      $pending = $active[direction]();
      if (!$pending.length) {
        $pending = this.$fallback(direction);
      }
      if ($pending.is($active)) {
        return;
      }
      return this.swap($active, $pending, direction);
    };

    Carousel.prototype.$ = function(selector) {
      return this.$el.find(selector);
    };

    return Carousel;

  })();

  $.fn.extend({
    carousel: function(option) {
      if (option == null) {
        option = {};
      }
      return this.each(function() {
        var $this, action, data, options, page;
        $this = $(this);
        data = $this.data("carousel");
        options = $.extend({}, $.fn.carousel.defaults, typeof option === "object" && option);
        action = typeof option === "string" ? option : option.action;
        if (typeof options !== "string") {
          page = option.page;
        }
        if (data == null) {
          $this.data("carousel", data = new Carousel($this, options));
        }
        if (action != null) {
          data[action]();
        }
        if (page != null) {
          return data.page(options.page);
        }
      });
    }
  });

  $(document).on("click.carousel", "[data-action],[data-page]", function(event) {
    var $target, $this, options;
    $this = $(this);
    $target = $this.closest(".carousel");
    if (!$target.length) {
      return;
    }
    event.preventDefault();
    event.stopPropagation();
    options = $.extend({}, $target.data(), $this.data());
    return $target.carousel(options);
  });

  $(function() {
    return $('.carousel').each(function() {
      return $(this).carousel();
    });
  });

}).call(this);
